searchNodes=[{"doc":"iex&gt; {:module, module, _, _} = defmodule Foobar do ...&gt; use Exnew ...&gt; defstruct [:c, :d] ...&gt; ...&gt; @impl true ...&gt; def handle_new(%{c: 1, d: 2}), do: {:ok, %{c: 2, d: 1}} ...&gt; def handle_new(%{c: 3, d: 4}), do: {:ok, %{c: 3, d: 4}} ...&gt; def handle_new(_), do: {:error, :unmatched} ...&gt; end iex&gt; module.new(%{c: 1, d: 2, e: 3}) |&gt; Map.from_struct() %{c: 2, d: 1} iex&gt; module.new([]) ** (ArgumentError) [:unmatched] %{}","ref":"Exnew.html","title":"Exnew","type":"behaviour"},{"doc":"","ref":"Exnew.html#c:handle_new/1","title":"Exnew.handle_new/1","type":"callback"},{"doc":"","ref":"Exnew.html#t:reason/0","title":"Exnew.reason/0","type":"type"},{"doc":"Exnew Elixir struct wrapper.iex&gt; {:module, module, _, _} = defmodule Foobar do ...&gt; use Exnew ...&gt; defstruct [:c, :d] ...&gt; ...&gt; @impl true ...&gt; def handle_new(%{c: 1, d: 2}), do: {:ok, %{c: 2, d: 1}} ...&gt; def handle_new(%{c: 3, d: 4}), do: {:ok, %{c: 3, d: 4}} ...&gt; def handle_new(_), do: {:error, :unmatched} ...&gt; end iex&gt; module.new(%{c: 1, d: 2, e: 3}) |&gt; Map.from_struct() %{c: 2, d: 1} iex&gt; module.new([]) ** (ArgumentError) [:unmatched] %{}","ref":"readme.html","title":"Exnew","type":"extras"},{"doc":"If available in Hex, the package can be installed by adding exnew to your list of dependencies in mix.exs:def deps do [ {:exnew, &quot;~&gt; 0.1.0&quot;} ] endDocumentation can be generated with ExDoc and published on HexDocs. Once published, the docs can be found at https://hexdocs.pm/exnew.","ref":"readme.html#installation","title":"Exnew - Installation","type":"extras"},{"doc":"Changelog","ref":"changelog.html","title":"Changelog","type":"extras"},{"doc":"Full ChangelogClosed issues:[CI FAIL] main [Fixed by main] #2* This Changelog was automatically generated by github_changelog_generator","ref":"changelog.html#v0-1-2-2020-12-24","title":"Changelog - v0.1.2 (2020-12-24)","type":"extras"}]